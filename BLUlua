-------------------------------------------------------------------------------------------------------------------
-- Setup functions for this job.  Generally should not be modified.
-------------------------------------------------------------------------------------------------------------------
-- Initialization function for this job file.
function get_sets()
    mote_include_version = 2
    
    -- Load and initialize the include file.
    include('Mote-Include.lua')
	include('organizer-lib')
	include('langly_include.lua')
    end


------------------------------------------------------------------------------

------------------------------------------------------------------------------	
-- Note this code requires the code in 'langly_include.lua' to be present.
-- Detects if your lockable gear is equipped and locks said slot. Then determines if it's an enchanted item and if that item has a charge ready or not to re-enable said slot.


-- Setup vars that are user-independent.  state.Buff vars initialized here will automatically be tracked.
function job_setup()
  --  state.Buff['Fantod'] = buffactive['Boost'] or false
	--state.Buff['Trick Attack'] = buffactive['Trick Attack'] or false
    state.Buff['Burst Affinity'] = buffactive['Burst Affinity'] or false
    state.Buff['Chain Affinity'] = buffactive['Chain Affinity'] or false
    state.Buff.Convergence = buffactive.Convergence or false
    state.Buff.Diffusion = buffactive.Diffusion or false
    state.Buff.Efflux = buffactive.Efflux or false
    
    state.Buff['Unbridled Learning'] = buffactive['Unbridled Learning'] or false
    state.SkillMode = M{['description']='Skill Mode', 'Normal', 'On'}
    
    include('Mote-TreasureHunter')
    
	state.TreasureMode:set('None')
	
	--state.RefreshMode:set('None')

    state.HasteMode = M{['description']='Haste Mode', 'Normal', 'Hi', 'Trust'}

    blue_magic_maps = {}
	
	divine_magic_maps = {}
    
    -- Mappings for gear sets to use for various blue magic spells.
    -- While Str isn't listed for each, it's generally assumed as being at least
    -- moderately signficant, even for spells with other mods.
    -- Physical Spells --
    
    -- Physical spells with no particular (or known) stat mods
    blue_magic_maps.Physical = S{  
    }

    -- Spells with heavy accuracy penalties, that need to prioritize accuracy first.
    blue_magic_maps.PhysicalAcc = S{
        'Heavy Strike',
    }

    -- Physical spells with Str stat mod
    blue_magic_maps.PhysicalStr = S{
        'Battle Dance','Bloodrake','Death Scissors','Dimensional Death',
        'Empty Thrash','Quadrastrike','Spinal Cleave', 'Sinker Drill',
        'Uppercut','Vertical Cleave', 'Quadratic Continuum', 'Thrashing Assault',
    }
        
    -- Physical spells with Dex stat mod
    blue_magic_maps.PhysicalDex = S{
        'Amorphic Spikes','Asuran Claws','Barbed Crescent','Claw Cyclone','Disseverment',
        'Foot Kick','Frenetic Rip','Goblin Rush','Hysteric Barrage','Seedspray',
		'Sickle Slash','Smite of Rage','Terror Touch','Vanity Dive'
    }
        
    -- Physical spells with Vit stat mod
    blue_magic_maps.PhysicalVit = S{
        'Body Slam','Cannonball','Glutinous Dart','Grand Slam',
        'Power Attack','Quad. Continuum','Sprout Smack','Sub-zero Smash',
    }
        
    -- Physical spells with Agi stat mod
    blue_magic_maps.PhysicalAgi = S{
        'Benthic Typhoon','Feather Storm','Helldive','Hydro Shot','Jet Stream',
        'Pinecone Bomb','Spiral Spin','Wild Oats'
    }

    -- Physical spells with Int stat mod
    blue_magic_maps.PhysicalInt = S{
        'Mandibular Bite','Queasyshroom'
    }

    -- Physical spells with Mnd stat mod
    blue_magic_maps.PhysicalMnd = S{
        'Ram Charge','Screwdriver',
    }

    -- Physical spells with Chr stat mod
    blue_magic_maps.PhysicalChr = S{
        'Bludgeon'
    }

    -- Physical spells with HP stat mod
    blue_magic_maps.PhysicalHP = S{
        'Final Sting'
    }

    -- Magical Spells --

    -- Magical spells with the typical Int mod
    blue_magic_maps.Magical = S{
        'Blastbomb','Blazing Bound','Bomb Toss','Cursed Sphere','Dark Orb','Death Ray',
        'Droning Whirlwind','Firespit','Foul Waters', 'Thunderbolt','Ice Break','Leafstorm',
		'Maelstrom','Retinal Glare','Water Bomb', 'Tenebral Crush', 'Spectral Floe',
        'Searing Tempest', 'Polar Roar',
    }
		    
	blue_magic_maps.MagicalLight = S{
        'Blinding Fulgor'
    }
    -- Magical spells with a primary Mnd mod
    blue_magic_maps.MagicalMnd = S{
        'Acrid Stream','Magic Hammer','Mind Blast','Scouring Spate', 'Diffusion Ray', 'Rail Cannon', 'Nectarous Deluge'
    }

    -- Magical spells with a primary Chr mod
    blue_magic_maps.MagicalChr = S{
        'Eyes On Me','Mysterious Light'
    }

    -- Magical spells with a Vit stat mod (on top of Int)
    blue_magic_maps.MagicalVit = S{
        'Thermal Pulse', 'Entomb', 'Embalming Earth', 'Uproot', 'Subduction','Rending Deluge',
    }

    blue_magic_maps.MagicalAgi = S{
	'Tem. Upheaval', 'Palling Salvo', 'Molting Plumage', 'Crashing Thunder',
        
    }

    -- Magical spells with a Dex stat mod (on top of Int)
    blue_magic_maps.MagicalDex = S{
        'Charged Whisker','Gates of Hades','Anvil Lightning'
    }
            
    -- Magical spells (generally debuffs) that we want to focus on magic accuracy over damage.
    -- Add Int for damage where available, though.
    blue_magic_maps.MagicAccuracy = S{
        '1000 Needles','Absolute Terror','Auroral Drape','Awful Eye',
        'Blank Gaze','Blistering Roar','Blood Drain','Blood Saber','Chaotic Eye',
        'Cimicine Discharge','Cold Wave','Corrosive Ooze','Demoralizing Roar','Digest',
        'Dream Flower','Enervation','Feather Tickle','Filamented Hold','Frightful Roar',
        'Geist Wall','Hecatomb Wave','Infrasonics','Light of Penance',
        'Lowing','Mortal Ray','MP Drainkiss','Osmosis','Reaving Wind',
        'Sandspin','Sandspray','Sheep Song','Soporific','Sound Blast','Stinking Gas',
        'Sub-zero Smash','Venom Shell','Voracious Trunk','Yawn', 'Cruel Joke', 'Cesspool',
		'Tearing Gust', 'Regurgitation', 'Silent Storm'
    }
        
    blue_magic_maps.Enmity = S{'Actinic Burst', 'Fantod', 'Jettatura',}
		
    -- Breath-based spells
    blue_magic_maps.Breath = S{
        'Bad Breath','Flying Hip Press','Frost Breath','Heat Breath',
        'Hecatomb Wave','Magnetite Cloud','Poison Breath','Radiant Breath','Self-Destruct',
        'Thunder Breath','Vapor Spray','Wind Breath'
    }

    -- Stun spells
    blue_magic_maps.Stun = S{
        'Blitzstrahl','Frypan','Head Butt','Sudden Lunge','Tail slap','Temporal Shift',
        'Whirl of Rage', 'Sweeping Gouge', 'Paralyzing Triad', 'Saurian Slide', 'Delta Thrust',
		'Tourbillion', 'Bilgestorm'
    }
        
    -- Healing spells
    blue_magic_maps.Healing = S{
        'Healing Breeze','Magic Fruit','Plenilune Embrace','Pollen','Restoral','White Wind',
        'Wild Carrot'
    }
    
    -- Buffs that depend on blue magic skill
    blue_magic_maps.SkillBasedBuff = S{
        'Barrier Tusk','Diamondhide','Magic Barrier','Metallic Body','Plasma Charge',
        'Pyric Bulwark','Reactor Cool','Nat. Meditation', 'Occultation', 'Atra. Libations'
    }

    -- Other general buffs
    blue_magic_maps.Buff = S{
        'Amplification','Animating Wail','Battery Charge','Carcharian Verve','Cocoon',
        'Erratic Flutter','Harden Shell','Memento Mori','Nat. Meditation',
		'Orcish Counterstance','Refueling','Regeneration','Saline Coat','Triumphant Roar',
		'Warm-Up','Zephyr Mantle', 'Mighty Guard'
    }
    
    blue_magic_maps.FastRecast = S{'Feather Barrier', 'Winds of Promyvion', 'Exuviation',}
	
    -- Spells that require Unbridled Learning to cast.
    unbridled_spells = S{
        'Absolute Terror','Bilgestorm','Blistering Roar','Bloodrake','Carcharian Verve',
        'Crashing Thunder','Droning Whirlwind','Gates of Hades','Harden Shell','Polar Roar',
        'Pyric Bulwark','Thunderbolt','Tourbillion','Uproot'
    }
	

	
    -- For th_action_check():
    -- JA IDs for actions that always have TH: Provoke, Animated Flourish
    info.default_ja_ids = S{35, 204}
    -- Unblinkable JA IDs for actions that always have TH: Quick/Box/Stutter Step, Desperate/Violent Flourish
    info.default_u_ja_ids = S{201, 202, 203, 205, 207}
	




-------------------------------------------------------------------------------------------------------------------
-- User setup functions for this job.  Recommend that these be overridden in a sidecar file.
-------------------------------------------------------------------------------------------------------------------

-- Setup vars that are user-dependent.  Can override this function in a sidecar file.
function user_setup()
    state.OffenseMode:options('Normal', 'Mid', 'Acc', 'Refresh', 'RefreshMid', 'RefreshAcc')
    state.HybridMode:options('Normal', 'PDT')
    state.WeaponskillMode:options('Normal', 'Acc')
    state.CastingMode:options('Normal', 'Resistant', 'TH')
    state.IdleMode:options('Normal', 'PDT', 'Learning')
	--state.RefreshMode:options('None', 'Basic', 'Max')

    -- Additional local binds
	send_command('bind ^= gs c cycle treasuremode')
    send_command('bind ^` input /ma "Sudden Lunge" <t>')
    send_command('bind !` input /ja "Efflux" <me>')
    send_command('bind @` input /ja "Burst Affinity" <me>')
    send_command('bind @f9 gs c cycle HasteMode')
    send_command('bind @= gs c cycle SkillMode')
	send_command('bind f12 input /target <stnpc>')

    update_combat_form()
    select_default_macro_book()
	set_lockstyle()
end

-- Called when this job file is unloaded (eg: job change)
function user_unload()
    send_command('unbind f12')
    send_command('unbind ^`')
    send_command('unbind !`')
    send_command('unbind @`')
    send_command('unbind @f9')
end


-- Set up gear sets.
function init_gear_sets()
    --------------------------------------
    -- Start defining the sets
    --------------------------------------

    HercFeet = {}
    HercHead = {}
    HercLegs = {}
    HercHands = {}
    HercBody = {}

    HercHands.R = {}
    HercHands.MAB = {}
    HercHands.WSD = {}
    
    HercFeet.MAB = {}
	HercFeet.FC = {feet={ name="Herculean Boots", augments={'"Fast Cast"+5','INT+3','"Mag.Atk.Bns."+1',}}}
    HercFeet.TP = {feet={ name="Herculean Boots", augments={'"Triple Atk."+4','STR+6','Accuracy+20 Attack+20','Mag. Acc.+13 "Mag.Atk.Bns."+13',}}}
    
    HercBody.MAB = {}
    HercBody.WSD = {}
    
    HercHead.MAB = {}
    HercHead.TP = {}
    HercHead.DM = {}

    HercLegs.MAB = {}
    HercLegs.TH = {} 

    Rosmerta = {}
    Rosmerta.TP = {}
    Rosmerta.WS = {}

    --sets.buff['Fantod'] = {head={ name="Herculean Helm", augments={'Crit.hit rate+2','"Treasure Hunter"+1',}},feet={ name="Herculean Boots", augments={'MND+4','Mag. Acc.+24','"Treasure Hunter"+1',}}, waist={ name="Tarutaru Sash", augments={'"Treasure Hunter"+1','INT+2',}},}
	--sets.buff['Trick Attack'] = {head={ name="Herculean Helm", augments={'Crit.hit rate+2','"Treasure Hunter"+1',}},feet={ name="Herculean Boots", augments={'MND+4','Mag. Acc.+24','"Treasure Hunter"+1',}}, waist={ name="Tarutaru Sash", augments={'"Treasure Hunter"+1','INT+2',}},}
    sets.buff['Burst Affinity'] = { --feet="Hashi. Basmak +1"	
	}
    sets.buff['Chain Affinity'] = { --head="Hashishin Kavuk +1", 
        --feet="Assimilator's Charuqs +1"
    }
    sets.buff.Convergence = {head="Luhlaza Keffiyeh +3"}
    sets.buff.Diffusion = {feet="Luhlaza Charuqs +3"}
    sets.buff.Enchainment = {body="Luhlaza Jubbah +3"}
    -- sets.buff.Efflux = {legs="Hashishin Tayt +1"}

    -- Precast Sets
    
    -- Precast sets to enhance JAs
    sets.precast.JA['Azure Lore'] = {hands="Luhlaza Bazubands +3"}
    
	sets.precast.JA['Efflux'] = {back={ name="Rosmerta's Cape", augments={'DEX+20','Accuracy+20 Attack+20','Accuracy+10','"Store TP"+10','Damage taken-5%',}}}
	
	sets.precast.JA['Provoke'] = {
    head="Malignance Chapeau",
	Body="Passion Jacket",
	feet="Malignance Boots",
    neck="Unmoving Collar",
    waist="Trance Belt",
	left_ear="Eris' Earring",
    right_ear="Friomisi Earring",
    left_ring="Petrov Ring",
    right_ring="Begrudging Ring",
    back="Earthcry Mantle",
    }
	
	sets.precast.JA['Lunge'] = {
    ammo={ name="Ghastly Tathlum +1", augments={'Path: A',}},
    head={ name="Luh. Keffiyeh +3", augments={'Enhances "Convergence" effect',}},
    body={ name="Luhlaza Jubbah +3", augments={'Enhances "Enchainment" effect',}},
    hands={ name="Luh. Bazubands +3", augments={'Enhances "Azure Lore" effect',}},
    legs={ name="Luhlaza Shalwar +3", augments={'Enhances "Assimilation" effect',}},
    feet={ name="Luhlaza Charuqs +3", augments={'Enhances "Diffusion" effect',}},
    neck="Sanctity Necklace",
    waist={ name="Acuity Belt +1", augments={'Path: A',}},
    left_ear="Hecate's Earring",
    right_ear="Friomisi Earring",
    left_ring="Jhakri Ring",
    right_ring={ name="Metamor. Ring +1", augments={'Path: A',}},
    back={ name="Cornflower Cape", augments={'MP+24','DEX+4','Accuracy+3','Blue Magic skill +10',}},
    }
	sets.precast.JA['Swipe'] = {
    ammo={ name="Ghastly Tathlum +1", augments={'Path: A',}},
    head={ name="Luh. Keffiyeh +3", augments={'Enhances "Convergence" effect',}},
    body={ name="Luhlaza Jubbah +3", augments={'Enhances "Enchainment" effect',}},
    hands={ name="Luh. Bazubands +3", augments={'Enhances "Azure Lore" effect',}},
    legs={ name="Luhlaza Shalwar +3", augments={'Enhances "Assimilation" effect',}},
    feet={ name="Luhlaza Charuqs +3", augments={'Enhances "Diffusion" effect',}},
    neck="Sanctity Necklace",
    waist={ name="Acuity Belt +1", augments={'Path: A',}},
    left_ear="Hecate's Earring",
    right_ear="Friomisi Earring",
    left_ring="Jhakri Ring",
    right_ring={ name="Metamor. Ring +1", augments={'Path: A',}},
    back={ name="Cornflower Cape", augments={'MP+24','DEX+4','Accuracy+3','Blue Magic skill +10',}},
    }



    -- Waltz set (chr and vit)
    sets.precast.Waltz = {
    head={ name="Herculean Helm", augments={'Rng.Atk.+9','"Waltz" potency +7%','STR+11',}},
    body="Passion Jacket",
    hands={ name="Herculean Gloves", augments={'Attack+9','"Waltz" potency +10%','DEX+6','Accuracy+10',}},
    legs={ name="Herculean Trousers", augments={'"Waltz" potency +10%','DEX+8',}},
    feet={ name="Herculean Boots", augments={'"Waltz" potency +10%','STR+14','Accuracy+1',}},
    neck="Unmoving Collar",
    waist="Latria Sash",
    left_ear="Tuisto Earring",
    right_ear="Enchntr. Earring +1",
    left_ring="Asklepian Ring",
    right_ring={ name="Metamor. Ring +1", augments={'Path: A',}},
    back="Iximulew Cape",
    }
        
    -- Don't need any special gear for Healing Waltz.
    sets.precast.Waltz['Healing Waltz'] = set_combine(sets.defense.PDT,	{
    left_ring="Ayanmo Ring",	
	})
    -- Fast cast sets for spells
      
    sets.precast.FC = {
    ammo="Impatiens",
    head={ name="Carmine Mask", augments={'Accuracy+15','Mag. Acc.+10','"Fast Cast"+3',}},
    body={ name="Luhlaza Jubbah +3", augments={'Enhances "Enchainment" effect',}},
    hands={ name="Leyline Gloves", augments={'Accuracy+15','Mag. Acc.+15','"Mag.Atk.Bns."+15','"Fast Cast"+3',}},
    legs={ name="Psycloth Lappas", augments={'MP+80','Mag. Acc.+15','"Fast Cast"+7',}},
    feet="Carmine Greaves",
    neck="Voltsurge Torque",
    waist="Witful Belt",
    left_ear="Loquac. Earring",
    right_ear="Enchntr. Earring +1",
    left_ring="Prolix Ring",
    right_ring="Lebeche Ring",
    back={ name="Rosmerta's Cape", augments={'"Fast Cast"+10',}},
    }
        
    sets.precast.FC['Blue Magic'] = set_combine(sets.precast.FC, {body="Hashishin Mintan +1"})
       
    -- Weaponskill sets
    -- Default set for any weaponskill that isn't any more specifically defined
    
	sets.precast.WS = {
    ammo="Ginsen",
    head="Luhlaza keffiyeh +3",
    body="Assim. Jubbah +3",
    hands="Jhakri Cuffs +2",
    legs="Luhlaza Shalwar +3",
    feet={ name="Herculean Boots", augments={'Attack+30','Weapon skill damage +3%','STR+11',}},
    neck={ name="Mirage Stole +2", augments={'Path: A',}},
    waist={ name="Sailfi Belt +1", augments={'Path: A',}},
    left_ear={ name="Moonshade Earring", augments={'Accuracy+4','TP Bonus +250',}},
    right_ear="Ishvara Earring",
    left_ring="Karieyh ring",
    right_ring="Epona's Ring",
    back={ name="Rosmerta's Cape", augments={'STR+20','Accuracy+20 Attack+20','STR+10','Weapon skill damage +10%',}},
}

    sets.precast.WS['Chant du Cygne'] = set_combine(sets.precast.WS, 
	{
    ammo="Ginsen",
    head={ name="Adhemar Bonnet +1", augments={'STR+12','DEX+12','Attack+20',}},
    body="Ayanmo Corazza +2",
    hands={ name="Herculean Gloves", augments={'Accuracy+24','Crit.hit rate+4','DEX+9','Attack+14',}},
    legs="Malignance Tights",
    feet="Thereoid Greaves",
    neck={ name="Mirage Stole +2", augments={'Path: A',}},
    waist="Fotia Belt",
    left_ear="Cessance Earring",
    right_ear="Odr Earring",
    left_ring="Ilabrat Ring",
    right_ring="Epona's Ring",
    back={ name="Rosmerta's Cape", augments={'DEX+20','Accuracy+20 Attack+20','DEX+6','Crit.hit rate+10',}},
    })
	
    sets.precast.WS['Chant du Cygne'].Mid = set_combine(sets.precast.WS['Chant du Cygne'], {})
	
	sets.precast.WS['Red Lotus Blade'] = set_combine(sets.precast.WS, {
    ammo={ name="Ghastly Tathlum +1", augments={'Path: A',}},
    head="Jhakri Coronal +2",
    body="Jhakri Robe +2",
    hands="Jhakri Cuffs +2",
    legs={ name="Luhlaza Shalwar +3", augments={'Enhances "Assimilation" effect',}},
    feet="Jhakri Pigaches +2",
    neck="Baetyl Pendant",
    waist={ name="Acuity Belt +1", augments={'Path: A',}},
    left_ear="Hecate's Earring",
    right_ear="Friomisi Earring",
    left_ring="Karieyh Ring",
    right_ring={ name="Metamor. Ring +1", augments={'Path: A',}},
    back={ name="Rosmerta's Cape", augments={'STR+20','Accuracy+20 Attack+20','STR+10','Weapon skill damage +10%',}},
    })
	
	sets.precast.WS['Shining Blade'] = sets.precast.WS['Red Lotus Blade']
	
	sets.precast.WS['Seraph Blade'] = sets.precast.WS['Red Lotus Blade']
	
	sets.precast.WS['Burning Blade'] = sets.precast.WS['Red Lotus Blade']
	
	sets.precast.WS['Expiacion'] = set_combine(sets.precast.WS, {
    ammo="Floestone",
    head={ name="Herculean Helm", augments={'Weapon skill damage +4%','INT+9','Accuracy+19 Attack+19',}},
    body="Assim. Jubbah +3",
    hands="Jhakri Cuffs +2",
    legs={ name="Luhlaza Shalwar +3", augments={'Enhances "Assimilation" effect',}},
    feet={ name="Herculean Boots", augments={'Attack+30','Weapon skill damage +3%','STR+11',}},
    neck={ name="Mirage Stole +2", augments={'Path: A',}},
    waist={ name="Sailfi Belt +1", augments={'Path: A',}},
    left_ear={ name="Moonshade Earring", augments={'Accuracy+4','TP Bonus +250',}},
    right_ear="Ishvara Earring",
    left_ring="Karieyh ring",
    right_ring={ name="Metamor. Ring +1", augments={'Path: A',}},
    back={ name="Rosmerta's Cape", augments={'STR+20','Accuracy+20 Attack+20','STR+10','Weapon skill damage +10%',}},
})
    
	
    sets.precast.WS['Savage Blade'] = set_combine(sets.precast.WS, {
    ammo="Ginsen",
    head="Luhlaza keffiyeh +3",
    body="Assim. Jubbah +3",
    hands="Jhakri Cuffs +2",
    legs="Luhlaza Shalwar +3",
    feet={ name="Herculean Boots", augments={'Attack+30','Weapon skill damage +3%','STR+11',}},
    neck={ name="Mirage Stole +2", augments={'Path: A',}},
    waist={ name="Sailfi Belt +1", augments={'Path: A',}},
    left_ear={ name="Moonshade Earring", augments={'Accuracy+4','TP Bonus +250',}},
    right_ear="Ishvara Earring",
    left_ring="Karieyh ring",
    right_ring="Epona's Ring",
    back={ name="Rosmerta's Cape", augments={'STR+20','Accuracy+20 Attack+20','STR+10','Weapon skill damage +10%',}},
})
    
	sets.precast.WS['Savage Blade'].Mid = set_combine(sets.precast.WS, {})
    sets.precast.WS['Savage Blade'].Acc = set_combine(sets.precast.WS.Mid, {})
    
    sets.precast.WS.acc = set_combine(sets.precast.WS, {})

    -- Specific weaponskill sets.  Uses the base set if an appropriate WSMod version isn't found.
    sets.precast.WS['Requiescat'] = set_combine(sets.precast.WS, {
    ammo="Honed Tathlum",
    head="Luhlaza keffiyeh +3",
    body="Luhlaza Jubbah +3",
    hands="Luhlaza Bazubands +3",
    legs="Jhakri Slops +2",
    feet="Luhlaza Charuqs +3",
    neck="Fotia Gorget",
    waist="Fotia Belt",
    left_ear={ name="Moonshade Earring", augments={'Accuracy+4','TP Bonus +250',}},
    right_ear="Brutal Earring",
    left_ring="Solemn Ring",
    right_ring="Epona's Ring",
    back="Bleating Mantle",
	})
	
	sets.precast.WS['Realm Razer'] = sets.precast.WS['Requiescat']

    sets.precast.WS['Sanguine Blade'] = {
	ammo="Ghastly Tathlum +1", 
	head="Pixie Hairpin +1", 
	body="Jhakri Robe +2", 
	hands="Jhakri Cuffs +2", 
	legs="Luhlaza Shalwar +3", 
	feet="Jhakri Pigaches +2",  
	neck="Sanctity Necklace",
    waist="Eschan Stone", 
	left_ear="Hecate's Earring", 
	right_ear="Friomisi Earring", 
	left_ring="Archon Ring", 
	right_ring={ name="Metamor. Ring +1", augments={'Path: A',}},
	back={ name="Cornflower Cape", augments={'MP+24','DEX+4','Accuracy+3','Blue Magic skill +10',}}
	}
   
    sets.Organizer = {
        back="Linkpearl",
    }
    
    -- Midcast Sets
    sets.midcast.FastRecast = {
        ammo="Impatiens",
        head={ name="Carmine Mask", augments={'Accuracy+15','Mag. Acc.+10','"Fast Cast"+3',}},
        ear1="Loquacious Earring",
		right_ear="Enchntr. Earring +1",
        neck="Voltsurge Torque",
		body="Luhlaza Jubbah +3",
        hands="Hashi. Bazu. +1",
        ring1="Prolix Ring",
        legs={ name="Psycloth Lappas", augments={'MP+80','Mag. Acc.+15','"Fast Cast"+7',}},
		feet="Carmine Greaves",
        waist="Witful Belt",
		back={ name="Rosmerta's Cape", augments={'"Fast Cast"+10',}},
    }

    sets.midcast['Dark Magic'] = {{ammo="Ghastly Tathlum +1",
    head="Jhakri Coronal +2",
    body="Jhakri Robe +2",
    hands="Jhakri Cuffs +2",
    legs="Luhlaza Shalwar +3",
    feet="Jhakri Pigaches +2",
    neck="Sanctity Necklace",
    waist={ name="Acuity Belt +1", augments={'Path: A',}},
    left_ear="Hecate's Earring",
    right_ear="Friomisi Earring",
    right_ring="Acumen Ring",
    left_ring="Jhakri Ring",
    back={ name="Cornflower Cape", augments={'MP+24','DEX+4','Accuracy+3','Blue Magic skill +10',}}}}
    
	sets.midcast.Drain = set_combine(sets.midcast['Dark Magic'], {
        --waist="Fucho-no-Obi",
    })
    sets.midcast.Aspir = sets.midcast.Drain
        
    sets.midcast['Blue Magic'] = {}
    
    -- Physical Spells --
    
    sets.midcast['Blue Magic'].Physical = {
    ammo="Floestone",
    head="Luhlaza keffiyeh +3",
    body="Luhlaza Jubbah +3",
    hands="Luhlaza Bazubands +3",
    legs="Jhakri Slops +2",
    feet={ name="Luhlaza Charuqs +3" },
    neck={ name="Mirage Stole +2", augments={'Path: A',}},
    waist="Prosilio Belt +1",
    left_ear="Njordr Earring",
    right_ear="Tati Earring",
    left_ring="Apate Ring",
    right_ring="Spiral Ring",
    back={ name="Rosmerta's Cape", augments={'STR+20','Accuracy+20 Attack+20','STR+10','Weapon skill damage +10%',}},}

    sets.midcast['Blue Magic'].PhysicalAcc = set_combine(sets.midcast['Blue Magic'].Physical, {})

    sets.midcast['Blue Magic'].PhysicalStr = set_combine(sets.midcast['Blue Magic'].Physical, {})

    sets.midcast['Blue Magic'].PhysicalDex = set_combine(sets.midcast['Blue Magic'].Physical, {
	right_ear="Odr Earring",
	hands="Malignance Gloves", 
	left_ring="Ilabrat Ring", 
	right_ring="Apate Ring",  
	back={ name="Rosmerta's Cape", augments={'DEX+20','Accuracy+20 Attack+20','DEX+6','Crit.hit rate+10',}}
	})

    sets.midcast['Blue Magic'].PhysicalVit = set_combine(sets.midcast['Blue Magic'].Physical, { left_ear="Tuisto Earring",
	waist="Latria Sash",
	})

    sets.midcast['Blue Magic'].PhysicalAgi = set_combine(sets.midcast['Blue Magic'].Physical, {left_ring="Ilabrat Ring"})

    sets.midcast['Blue Magic'].PhysicalInt = set_combine(sets.midcast['Blue Magic'].Physical, {})

    sets.midcast['Blue Magic'].PhysicalMnd = set_combine(sets.midcast['Blue Magic'].Physical, {})

    sets.midcast['Blue Magic'].PhysicalChr = set_combine(sets.midcast['Blue Magic'].Physical, {})

    sets.midcast['Blue Magic'].PhysicalHP = set_combine(sets.midcast['Blue Magic'].Physical)


    -- Magical Spells --
    
    sets.midcast['Blue Magic'].Magical = {ammo="Ghastly Tathlum +1",
    head="Jhakri Coronal +2",
    body="Jhakri Robe +2",
    hands="Jhakri Cuffs +2",
    legs="Luhlaza Shalwar +3",
    feet="Jhakri Pigaches +2",
    neck="Sanctity Necklace",
    waist={ name="Acuity Belt +1", augments={'Path: A',}},
    left_ear="Hecate's Earring",
    right_ear="Friomisi Earring",
    left_ring="Jhakri Ring",
    right_ring={ name="Metamor. Ring +1", augments={'Path: A',}},
    back={ name="Cornflower Cape", augments={'MP+24','DEX+4','Accuracy+3','Blue Magic skill +10',}}
	}

    sets.midcast['Blue Magic'].Magical.Resistant = set_combine(sets.midcast['Blue Magic'].Magical, {ammo="Mavi Tathlum"})
    
	sets.midcast['Blue Magic'].MagicalLight = set_combine(sets.midcast['Blue Magic'].Magical, {})
	
    sets.midcast['Blue Magic'].MagicalMnd = set_combine(sets.midcast['Blue Magic'].Magical, {Waist="Eschan Stone"})

    sets.midcast['Blue Magic'].MagicalAgi = set_combine(sets.midcast['Blue Magic'].Magical, {})

    sets.midcast['Blue Magic'].MagicalChr = set_combine(sets.midcast['Blue Magic'].Magical, {})

    sets.midcast['Blue Magic'].MagicalVit = set_combine(sets.midcast['Blue Magic'].Magical, {})

    sets.midcast['Blue Magic'].MagicalDex = set_combine(sets.midcast['Blue Magic'].Magical, {})

    sets.midcast['Blue Magic'].MagicAccuracy = {
    ammo="Pemphredo Tathlum",
    head="Malignance Chapeau",
    body="Malignance Tabard",
    hands="Malignance Gloves",
    legs="Malignance Tights",
    feet="Malignance Boots",
    neck={ name="Mirage Stole +2", augments={'Path: A',}},
    waist={ name="Acuity Belt +1", augments={'Path: A',}},
    left_ear="Njordr Earring",
    right_ear="Digni. Earring",
    left_ring={"Jhakri Ring"},
    right_ring={ name="Metamor. Ring +1", augments={'Path: A',}},
    back={ name="Cornflower Cape", augments={'MP+24','DEX+4','Accuracy+3','Blue Magic skill +10',}},
    }
    
    sets.midcast['Blue Magic'].Enmity = set_combine(sets.midcast['Blue Magic'].MagicAccuracy, {
    head="Malignance Chapeau",
	Body="Passion Jacket",
	feet="Malignance Boots",
    neck="Unmoving Collar",
    waist="Trance Belt",
	left_ear="Eris' Earring",
    right_ear="Friomisi Earring",
    left_ring="Petrov Ring",
    right_ring="Begrudging Ring",
    back="Earthcry Mantle",
    })
    sets.midcast['Divine Magic'] = set_combine(sets.midcast['Blue Magic'].Enmity)
	
	sets.midcast['Elemental Magic'] = {ammo="Ghastly Tathlum +1",
    head="Jhakri Coronal +2",
    body="Jhakri Robe +2",
    hands="Jhakri Cuffs +2",
    legs="Luhlaza Shalwar +3",
    feet="Jhakri Pigaches +2",
    neck="Sanctity Necklace",
    waist={ name="Acuity Belt +1", augments={'Path: A',}},
    left_ear="Hecate's Earring",
    right_ear="Friomisi Earring",
    right_ring="Acumen Ring",
    left_ring="Jhakri Ring",
    back={ name="Cornflower Cape", augments={'MP+24','DEX+4','Accuracy+3','Blue Magic skill +10',}}}
	
	sets.midcast['Dark Magic'] = {ammo="Ghastly Tathlum +1",
    head="Jhakri Coronal +2",
    body="Jhakri Robe +2",
    hands="Jhakri Cuffs +2",
    legs="Luhlaza Shalwar +3",
    feet="Jhakri Pigaches +2",
    neck="Sanctity Necklace",
    waist={ name="Acuity Belt +1", augments={'Path: A',}},
    left_ear="Hecate's Earring",
    right_ear="Friomisi Earring",
    right_ring="Acumen Ring",
    left_ring="Jhakri Ring",
    back={ name="Cornflower Cape", augments={'MP+24','DEX+4','Accuracy+3','Blue Magic skill +10',}}}
	-- Breath Spells --
    
    sets.midcast['Blue Magic'].Breath = set_combine(sets.midcast['Blue Magic'].MagicAccuracy, {
        ammo="Mavi Tathlum",
        head="Luh. Keffiyeh +3",
		waist="Glassblower's Belt",
          })

    -- Other Types --
    
    sets.midcast['Blue Magic'].Stun = set_combine(sets.midcast['Blue Magic'].MagicAccuracy, {
    ammo="Pemphredo Tathlum",
    head="Malignance Chapeau",
    body="Malignance Tabard",
    hands="Malignance Gloves",
    legs="Malignance Tights",
    feet="Malignance Boots",
    neck={ name="Mirage Stole +2", augments={'Path: A',}},
    waist={ name="Acuity Belt +1", augments={'Path: A',}},
    left_ear="Njordr Earring",
    right_ear="Digni. Earring",
    left_ring="Ayanmo Ring",
    left_ring="Jhakri Ring",
    back={ name="Cornflower Cape", augments={'MP+24','DEX+4','Accuracy+3','Blue Magic skill +10',}},
})

    sets.midcast['Enfeebling Magic'] =  set_combine(sets.midcast['Blue Magic'].MagicAccuracy, {
	left_ear="Enchntr. Earring +1",
	back={ name="Rosmerta's Cape", augments={'INT+20','Mag. Acc+20 /Mag. Dmg.+20','"Mag.Atk.Bns."+10','Spell interruption rate down-10%',}},
	})
        
    sets.midcast['Blue Magic']['Tenebral Crush'] = set_combine(sets.midcast['Blue Magic'].Magical, {head="Pixie Hairpin +1", left_ring="Archon Ring"})
	
	sets.midcast['Blue Magic']['Evryone. Grudge'] = set_combine(sets.midcast['Blue Magic'].MagicalMnd, {head="Pixie Hairpin +1", left_ring="Archon Ring"})
   
   sets.midcast['Blue Magic'].Magical.TH = set_combine(sets.midcast['Blue Magic'].Magical, {feet={ name="Herculean Boots", augments={'MND+4','Mag. Acc.+24','"Treasure Hunter"+1',}}, waist={ name="Tarutaru Sash", augments={'"Treasure Hunter"+1','INT+2',}}})
   
    sets.midcast['Blue Magic'].Healing = {
    ammo="Pemphredo Tathlum",
    head={ name="Telchine Cap", augments={'"Cure" potency +8%','"Regen" potency+3',}},
    body="Vrikodara Jupon",
    hands={ name="Telchine Gloves", augments={'Potency of "Cure" effect received+7%','"Regen" potency+3',}},
    legs={ name="Telchine Braconi", augments={'"Cure" potency +7%','"Regen" potency+3',}},
    feet={ name="Medium's Sabots", augments={'MP+50','MND+10','"Conserve MP"+7','"Cure" potency +5%',}},
    neck="Nuna Gorget",
    waist={ name="Sailfi Belt +1", augments={'Path: A',}},
    left_ear="Mendi. Earring",
    right_ear="Eabani Earring",
    left_ring="Solemn Ring",
    right_ring={ name="Metamor. Ring +1", augments={'Path: A',}},
    back="Aurist's Cape +1",
    }
    
    sets.midcast['Healing Magic'] = set_combine(sets.midcast['Blue Magic'].Healing)

    sets.midcast['Blue Magic']['White Wind'] = set_combine(sets.midcast['Blue Magic'].Healing, 	{})
       		
    sets.midcast['Blue Magic'].Buff = {
    ammo="Pemphredo Tathlum",
    head="Ipoca Beret",
    body="Vedic Coat",
    hands={ name="Rawhide Gloves", augments={'Mag. Acc.+15','INT+7','MND+7',}},
    legs={ name="Carmine Cuisses +1", augments={'Accuracy+20','Attack+12','"Dual Wield"+6',}},
    feet={ name="Psycloth Boots", augments={'Mag. Acc.+10','Spell interruption rate down +15%','MND+7',}},
    neck={ name="Mirage Stole +2", augments={'Path: A',}},
    waist={ name="Tarutaru Sash", augments={'"Treasure Hunter"+1','INT+2',}},
    left_ear="Mendi. Earring",
    right_ear="Gifted Earring",
    left_ring="Evanescence Ring",
    right_ring="Defending Ring",
    back={ name="Rosmerta's Cape", augments={'INT+20','Mag. Acc+20 /Mag. Dmg.+20','"Mag.Atk.Bns."+10','Spell interruption rate down-10%',}},
    }
	
	sets.midcast['Blue Magic']['Regeneration'] = set_combine(sets.midcast['Blue Magic'].Buff, {
	head={ name="Telchine Cap", augments={'"Cure" potency +8%','"Regen" potency+3',}},
    body={ name="Telchine Chas.", augments={'"Regen" potency+3',}},
    hands={ name="Telchine Gloves", augments={'Potency of "Cure" effect received+7%','"Regen" potency+3',}},
    legs={ name="Telchine Braconi", augments={'"Cure" potency +7%','"Regen" potency+3',}},
    feet={ name="Telchine Pigaches", augments={'"Cure" potency +7%','"Regen" potency+3',}},
	})
    
	sets.midcast['Blue Magic'].SkillBasedBuff = {
    ammo="Mavi Tathlum",
    head={ name="Luh. Keffiyeh +3", augments={'Enhances "Convergence" effect',}},
    body="Assim. Jubbah +3",
    hands="Rawhide Gloves",
    legs="Hashishin Tayt +1",
    feet={ name="Luhlaza Charuqs +3", augments={'Enhances "Diffusion" effect',}},
    neck={ name="Mirage Stole +2", augments={'Path: A',}},
    waist={ name="Tarutaru Sash", augments={'"Treasure Hunter"+1','INT+2',}},
    left_ear="Njordr Earring",
    right_ear="Gifted Earring",
    left_ring="Evanescence Ring",
    right_ring="Defending Ring",
    back={ name="Cornflower Cape", augments={'MP+24','DEX+4','Accuracy+3','Blue Magic skill +10',}},
    }
	
	sets.midcast['Blue Magic']['Occultation'] = set_combine(sets.midcast['Blue Magic'].SkillBasedBuff, { 
    hands="Hashi. Bazu. +1",	
	waist="Witful Belt",
	right_ear="Enchntr. Earring +1",
	left_ring="Prolix Ring",
	})
	
	sets.midcast['Blue Magic']['Battery Charge'] = set_combine(sets.midcast['Blue Magic'].Buff, { 
	waist="Gishdubar Sash",
    head="Amalric Coif", 
	back="Grapevine Cape"    
	})
    
	sets.midcast['Blue Magic']['Diamondhide'] = set_combine(sets.midcast['Blue Magic'].Buff, {
    ammo="Pemphredo Tathlum",
    head="Ipoca Beret",
    body="Vedic Coat",
    hands={ name="Rawhide Gloves", augments={'Mag. Acc.+15','INT+7','MND+7',}},
    legs={ name="Carmine Cuisses +1", augments={'Accuracy+20','Attack+12','"Dual Wield"+6',}},
    feet={ name="Psycloth Boots", augments={'Mag. Acc.+10','Spell interruption rate down +15%','MND+7',}},
    neck={ name="Mirage Stole +2", augments={'Path: A',}},
    waist={ name="Sailfi Belt +1", augments={'Path: A',}},
    left_ear="Gifted Earring",
    right_ear="Enchntr. Earring +1",
    left_ring="Evanescence Ring",
    right_ring="Defending Ring",
    back={ name="Rosmerta's Cape", augments={'INT+20','Mag. Acc+20 /Mag. Dmg.+20','"Mag.Atk.Bns."+10','Spell interruption rate down-10%',}},
    })
	
	sets.midcast.Refresh = sets.midcast['Blue Magic']['Battery Charge']
	
	sets.midcast.Aquaveil = sets.midcast['Blue Magic']['Battery Charge']
    
    -- sets.midcast.Protect = {ring1="Sheltered Ring"}
    -- sets.midcast.Protectra = {ring1="Sheltered Ring"}
    -- sets.midcast.Shell = {ring1="Sheltered Ring"}
    -- sets.midcast.Shellra = {ring1="Sheltered Ring"}

    -- Sets to return to when not performing an action.

    -- Gear for learning spells: +skill and AF hands.
    sets.Learning = {
        -- ammo="Mavi Tathlum",
        -- head="Mirage Keffiyeh",
        --neck={ name="Mirage Stole +2", augments={'Path: A',}},
        hands="Assim. Bazu. +2"
    }
        --head="Luhlaza Keffiyeh",  
        --body="Assimilator's Jubbah",hands="Assimilator's Bazubands +1",
        --back="Cornflower Cape",legs="Mavi Tayt +2",feet="Luhlaza Charuqs +3"}

    --sets.Refresh = {	body="Luhlaza Jubbah +3"    }

    sets.latent_refresh = {body="Jhakri Robe +2"}
    
   sets.TreasureHunter = { 
   head={ name="Herculean Helm", augments={'Crit.hit rate+2','"Treasure Hunter"+1',}},
   feet={ name="Herculean Boots", augments={'MND+4','Mag. Acc.+24','"Treasure Hunter"+1',}},
   waist={ name="Tarutaru Sash", augments={'"Treasure Hunter"+1','INT+2',}}
   }
    -- Resting sets
    sets.resting = {body="Jhakri Robe +2", head={ name="Herculean Helm", augments={'Pet: CHR+7','Pet: Mag. Acc.+4','"Refresh"+2','Accuracy+10 Attack+10','Mag. Acc.+19 "Mag.Atk.Bns."+19',}}}
    
    -- Idle sets
    sets.idle = {
	head={ name="Herculean Helm", augments={'Pet: CHR+7','Pet: Mag. Acc.+4','"Refresh"+2','Accuracy+10 Attack+10','Mag. Acc.+19 "Mag.Atk.Bns."+19',}},
	neck="Mirage Stole +2",
	body="Jhakri Robe +2",
	hands="Malignance Gloves",
    legs={ name="Carmine Cuisses +1", augments={'Accuracy+20','Attack+12','"Dual Wield"+6',}}, 
	left_ring="Karieyh ring", 
	right_ring="Defending Ring",
	left_ear="Infused Earring",
    feet={ name="Herculean Boots", augments={'Accuracy+3','MND+8','"Refresh"+1','Accuracy+12 Attack+12','Mag. Acc.+10 "Mag.Atk.Bns."+10',}}, 
	back={ name="Rosmerta's Cape", augments={'DEX+20','Accuracy+20 Attack+20','Accuracy+10','"Store TP"+10','Damage taken-5%',}},
}

    sets.idle.PDT = set_combine(sets.idle, {ammo="Ginsen",
    head="Malignance Chapeau",
    body="Jhakri Robe +2",
    hands="Malignance Gloves",
    legs={ name="Carmine Cuisses +1", augments={'Accuracy+20','Attack+12','"Dual Wield"+6',}},
    feet="Malignance Boots",
    neck="Twilight Torque",
    waist={ name="Sailfi Belt +1", augments={'Path: A',}},
    left_ear="Infused Earring",
    right_ear="Suppanomimi",
    left_ring="Ayanmo Ring",
    right_ring="Defending Ring",
    back={ name="Rosmerta's Cape", augments={'DEX+20','Accuracy+20 Attack+20','Accuracy+10','"Store TP"+10','Damage taken-5%',}}})

    sets.idle.Town = set_combine(sets.idle, {ring1="Karieyh ring", body="Jhakri Robe +2", legs={ name="Carmine Cuisses +1", augments={'Accuracy+20','Attack+12','"Dual Wield"+6',}}})

    sets.idle.Learning = set_combine(sets.idle, sets.Learning)

    sets.idle.Refresh = set_combine(sets.idle.Regen, {   })
    
    -- Defense sets
    sets.defense.PDT = {
	ammo="Ginsen",
    head="Malignance Chapeau",
    body="Malignance Tabard",
    hands="Malignance Gloves",
    legs="Malignance Tights",
    feet="Malignance Boots",
    neck="Twilight Torque",
    waist="Reiki Yotai",
    left_ear="Cessance Earring",
    right_ear="Suppanomimi",
    left_ring="Chirich Ring +1",
    right_ring="Defending Ring",
    back={ name="Rosmerta's Cape", augments={'DEX+20','Accuracy+20 Attack+20','Accuracy+10','"Dual Wield"+10','Damage taken-5%',}},
	}

    sets.defense.MDT = set_combine(sets.defense.PDT, {
	ammo="Amar Cluster",
    head="Malignance Chapeau",
    body="Malignance Tabard",
    hands="Malignance Gloves",
    legs="Malignance Tights",
    feet="Malignance Boots",
    neck="Twilight Torque",
    waist="Svelt. Gouriz +1",
    left_ear="Infused Earring",
    right_ear="Eabani Earring",
    left_ring="Ilabrat Ring",
    right_ring="Defending Ring",
    back="Boxer's Mantle",
	})

    sets.Kiting = {legs={ name="Carmine Cuisses +1", augments={'Accuracy+20','Attack+12','"Dual Wield"+6',}}}

    -- Engaged sets

    -- Variations for TP weapon and (optional) offense/defense modes.  Code will fall back on previous
    -- sets if more refined versions aren't defined.
    -- If you create a set with both offense and defense modes, the offense mode should be first.
    -- EG: sets.engaged.Dagger.Accuracy.Evasion
    
    -- Normal melee group
    sets.engaged = {
    ammo="Ginsen",
    head={ name="Adhemar Bonnet +1", augments={'STR+12','DEX+12','Attack+20',}},
    body={ name="Adhemar Jacket +1", augments={'DEX+12','AGI+12','Accuracy+20',}},
    hands={ name="Adhemar Wrist. +1", augments={'Accuracy+20','Attack+20','"Subtle Blow"+8',}},
    legs={ name="Carmine Cuisses +1", augments={'Accuracy+20','Attack+12','"Dual Wield"+6',}},
    feet={ name="Herculean Boots", augments={'"Triple Atk."+4','STR+6','Accuracy+20 Attack+20','Mag. Acc.+13 "Mag.Atk.Bns."+13',}},
    neck={ name="Mirage Stole +2", augments={'Path: A',}},
    waist="Windbuffet Belt +1",
    left_ear="Cessance Earring",
    right_ear="Suppanomimi",
    ring1={name="Chirich Ring +1", bag="wardrobe"},	
    right_ring="Epona's Ring",
    back={ name="Rosmerta's Cape", augments={'DEX+20','Accuracy+20 Attack+20','Accuracy+10','"Dual Wield"+10','Damage taken-5%',}},
}
	sets.engaged.Mid = set_combine(sets.engaged, {
	ammo="Honed Tathlum", 
	left_ear="Telos Earring", 
	hands="Malignance Gloves", 
	feet="Malignance Boots"
	})

    sets.engaged.Acc = set_combine(sets.engaged.Mid, {
	head="Malignance Chapeau", 
	hands="Malignance Gloves",
	feet="Malignance Boots", 
	right_ear="Digni. Earring", 
	ring1={name="Chirich Ring +1", bag="wardrobe"},
	ring2={name="Chirich Ring +1", bag="wardrobe2"},
	waist="Reiki Yotai"})
	
	 sets.engaged.AM3 = set_combine(sets.engaged, { 
	 head="Malignance Chapeau",
	 body="Malignance Tabard",
	 hands="Malignance Gloves",
	 legs="Malignance Tights",
	 feet="Malignance Boots",
	 waist="Reiki Yotai",
	 left_ear="Telos Earring",
	 right_ear="Eabani Earring",
	 ring1={name="Chirich Ring +1", bag="wardrobe"},
	 ring2={name="Chirich Ring +1", bag="wardrobe2"},
	 })
 
     sets.engaged.Mid.AM3 = set_combine(sets.engaged.AM3, {ammo="Honed Tathlum"})
    
	sets.engaged.Acc.AM3 = set_combine(sets.engaged.Mid.AM3, {
	right_ear="Digni. Earring", 
	body={ name="Adhemar Jacket +1", augments={'DEX+12','AGI+12','Accuracy+20',}},
	legs={ name="Carmine Cuisses +1", augments={'Accuracy+20','Attack+12','"Dual Wield"+6',}},
	})
	
	sets.engaged.Refresh = set_combine(sets.engaged,{ body="Luhlaza Jubbah +3"})
	
	sets.engaged.Refresh.AM3 = set_combine(sets.engaged.Refresh, {
	head="Malignance Chapeau",
	hands="Malignance Gloves",
	legs="Malignance Tights",
	feet="Malignance Boots",
	waist="Reiki Yotai",
	left_ear="Telos Earring",
	right_ear="Eabani Earring",
	ring1={name="Chirich Ring +1", bag="wardrobe"},
	ring2={name="Chirich Ring +1", bag="wardrobe2"},
	})
	
	sets.engaged.RefreshMid = set_combine(sets.engaged.Mid, { body="Luhlaza Jubbah +3"})
    
	sets.engaged.RefreshMid.AM3 = set_combine(sets.engaged.Refresh.AM3, {
	ammo="Honed Tathlum",
	left_ear="Cessance Earring"})
    
	sets.engaged.RefreshAcc = set_combine(sets.engaged.Acc, { body="Luhlaza Jubbah +3"})
	
	sets.engaged.RefreshAcc.AM3 = set_combine(sets.engaged.RefreshMid.AM3, {waist="Reiki Yotai"})

    sets.engaged.PDT = set_combine(sets.engaged, {    
    head="Malignance Chapeau",
    body="Malignance Tabard",
    hands="Malignance Gloves",
    legs="Malignance Tights",
    feet="Malignance Boots",
    neck="Twilight Torque",    
    right_ring="Defending Ring",   
	back={ name="Rosmerta's Cape", augments={'DEX+20','Accuracy+20 Attack+20','Accuracy+10','"Dual Wield"+10','Damage taken-5%',}}
    })

    sets.engaged.PDT.AM3 = set_combine(sets.engaged.PDT, {})
    
	sets.engaged.Mid.PDT = set_combine(sets.engaged.Mid, {
	head="Malignance Chapeau",
    body="Malignance Tabard",
    hands="Malignance Gloves",
    legs="Malignance Tights",
    feet="Malignance Boots",
    neck="Twilight Torque",    
    right_ring="Defending Ring",   
	right_ear="Suppanomimi", 
	waist="Reiki Yotai",
	ammo="Honed Tathlum"
	})
    
	sets.engaged.Mid.PDT.AM3 = set_combine(sets.engaged.Mid.PDT, {})

    sets.engaged.Acc.PDT = set_combine(sets.engaged.Mid.PDT, {
	ring1={name="Chirich Ring +1", bag="wardrobe"}, 
	waist="Reiki Yotai",
	right_ear="Digni. Earring", 
	})

    sets.engaged.Acc.PDT.AM3 = set_combine(sets.engaged.Acc.PDT, {})
	
    sets.engaged.Learning = set_combine(sets.engaged, sets.Learning)
	
	sets.engaged.Learning.AM3 = set_combine(sets.engaged.AM3, sets.Learning)
	

	
    ----------------------------------------------------------------------------------------------------------------------
    ------------------------------HASTE-----------------------------------------------------------------------------------
    ----------------------------------------------------------------------------------------------------------------------
	
	
	sets.engaged.MaxHaste = set_combine(sets.engaged, {
	waist="Reiki Yotai", 
	right_ear="Eabani Earring", 
	legs="Malignance Tights", 
	Body="Ayanmo Corazza +2", 
	back={ name="Rosmerta's Cape", augments={'DEX+20','Accuracy+20 Attack+20','Accuracy+10','"Store TP"+10','Damage taken-5%',}},
	})
	
	sets.engaged.AM3.MaxHaste = set_combine(sets.engaged.AM3, {
	waist="Reiki Yotai", 
	right_ear="Eabani Earring", 
	back={ name="Rosmerta's Cape", augments={'DEX+20','Accuracy+20 Attack+20','Accuracy+10','"Store TP"+10','Damage taken-5%',}},
	head="Malignance Chapeau", 
	body="Malignance Tabard",
    hands="Malignance Gloves", 
	legs="Malignance Tights", 
	feet="Malignance Boots",  
	left_ear="Telos Earring",
	ring1={name="Chirich Ring +1", bag="wardrobe"}, 
	ring2={name="Chirich Ring +1", bag="wardrobe2"}, 
	})
    
	sets.engaged.Mid.MaxHaste = set_combine(sets.engaged.MaxHaste, {
	ammo="Honed Tathlum",
	left_ear="Telos Earring",
	})
	
	sets.engaged.Mid.AM3.MaxHaste = set_combine(sets.engaged.Mid.AM3, {
	ammo="Honed Tathlum", 
	left_ear="Telos Earring",
	head="Malignance Chapeau", 
	body="Malignance Tabard",
    hands="Malignance Gloves", 
	legs="Malignance Tights", 
	feet="Malignance Boots",
    waist="Reiki Yotai",
	back={ name="Rosmerta's Cape", augments={'DEX+20','Accuracy+20 Attack+20','Accuracy+10','"Store TP"+10','Damage taken-5%',}},
	ring1={name="Chirich Ring +1", bag="wardrobe"}, 
	ring2={name="Chirich Ring +1", bag="wardrobe2"}, 
	})
	
    sets.engaged.Acc.MaxHaste = set_combine(sets.engaged.Mid.MaxHaste, {
	right_ear="Digni. Earring", 
	ring1={name="Chirich Ring +1", bag="wardrobe"},
	ring2={name="Chirich Ring +1", bag="wardrobe2"},
	})
	
	sets.engaged.Acc.AM3.MaxHaste = set_combine(sets.engaged.Acc.AM3, {
	ammo="Honed Tathlum", 
	left_ear="Telos Earring",
	right_ear="Digni. Earring", 
	ammo="Honed Tathlum", 
	head="Malignance Chapeau", 
	body="Malignance Tabard",
    hands="Malignance Gloves", 
	legs="Malignance Tights", 
	feet="Malignance Boots",
    waist="Reiki Yotai",
	back={ name="Rosmerta's Cape", augments={'DEX+20','Accuracy+20 Attack+20','Accuracy+10','"Store TP"+10','Damage taken-5%',}},
	ring1={name="Chirich Ring +1", bag="wardrobe"}, 
	ring2={name="Chirich Ring +1", bag="wardrobe2"}, 
	})
    
	sets.engaged.Learning.MaxHaste = set_combine(sets.engaged.MaxHaste, sets.Learning)
	
	sets.engaged.Learning.AM3.MaxHaste = set_combine(sets.engaged.MaxHaste, sets.Learning.AM3)
    
    sets.engaged.PDT.MaxHaste = set_combine(sets.engaged.PDT, {
	waist="Reiki Yotai", 
	left_ear="Telos Earring",
	right_ear="Eabani Earring", 
	back={ name="Rosmerta's Cape", augments={'DEX+20','Accuracy+20 Attack+20','Accuracy+10','"Store TP"+10','Damage taken-5%',}},
	head="Malignance Chapeau", 
	body="Malignance Tabard",
    hands="Malignance Gloves", 
	legs="Malignance Tights", 
	feet="Malignance Boots",  
	neck="Twilight Torque",    
    right_ring="Defending Ring",   
	})
	
	sets.engaged.PDT.AM3.MaxHaste = set_combine(sets.engaged.PDT.AM3, {
	waist="Reiki Yotai", 
	left_ear="Telos Earring",
	right_ear="Eabani Earring", 
	back={ name="Rosmerta's Cape", augments={'DEX+20','Accuracy+20 Attack+20','Accuracy+10','"Store TP"+10','Damage taken-5%',}},
	head="Malignance Chapeau", 
	body="Malignance Tabard",
    hands="Malignance Gloves", 
	legs="Malignance Tights", 
	feet="Malignance Boots",  
	neck="Twilight Torque",    
    right_ring="Defending Ring",   
	})
	
	sets.engaged.Mid.PDT.MaxHaste = set_combine(sets.engaged.Mid.PDT, {
	ammo="Honed Tathlum", 
	waist="Reiki Yotai", 
	left_ear="Telos Earring",
	right_ear="Eabani Earring", 
	back={ name="Rosmerta's Cape", augments={'DEX+20','Accuracy+20 Attack+20','Accuracy+10','"Store TP"+10','Damage taken-5%',}},
	neck="Twilight Torque",    
    right_ring="Defending Ring",   
	})
	
	sets.engaged.Mid.PDT.AM3.MaxHaste = set_combine(sets.engaged.Mid.PDT.AM3, {
	ammo="Honed Tathlum", 
	waist="Reiki Yotai", 
	left_ear="Telos Earring",
	right_ear="Eabani Earring", 
	back={ name="Rosmerta's Cape", augments={'DEX+20','Accuracy+20 Attack+20','Accuracy+10','"Store TP"+10','Damage taken-5%',}},
	neck="Twilight Torque",    
    right_ring="Defending Ring",   
	})
	
	sets.engaged.Acc.PDT.MaxHaste = set_combine(sets.engaged.Acc.PDT, {
	ammo="Honed Tathlum", 
	left_ear="Telos Earring",
	right_ear="Digni. Earring", 
	waist="Reiki Yotai", 
	back={ name="Rosmerta's Cape", augments={'DEX+20','Accuracy+20 Attack+20','Accuracy+10','"Store TP"+10','Damage taken-5%',}},
	neck="Twilight Torque",    
    right_ring="Defending Ring",   
	})
	
	sets.engaged.Mid.PDT.AM3.MaxHaste = set_combine(sets.engaged.Mid.PDT.AM3, {
	ammo="Honed Tathlum", 
	left_ear="Telos Earring",
	right_ear="Digni. Earring", 
	waist="Reiki Yotai", 
	left_ear="Telos Earring",
	back={ name="Rosmerta's Cape", augments={'DEX+20','Accuracy+20 Attack+20','Accuracy+10','"Store TP"+10','Damage taken-5%',}},
	neck="Twilight Torque",    
    right_ring="Defending Ring",   
	})
    --sets.engaged.Haste_35 = set_combine(sets.engaged, {})
	--sets.engaged.Haste_35.AM3 = set_combine(sets.engaged.AM3, {})
	
    --sets.engaged.Mid.Haste_35 = set_combine(sets.engaged.Mid, {})
    --sets.engaged.Mid.Haste_35.AM3 = set_combine(sets.engaged.Mid.AM3, {})
    
	--sets.engaged.Acc.Haste_35 = set_combine(sets.engaged.Acc, {})
    --sets.engaged.Acc.Haste_35.AM3 = set_combine(sets.engaged.Acc.AM3, {})
	
	--sets.engaged.Learning.Haste_35 = set_combine(sets.engaged, sets.Learning)
	--sets.engaged.Learning.Haste_35.AM3 = set_combine(sets.engaged.AM3, sets.Learning)

    --sets.engaged.PDT.Haste_35 = set_combine(sets.engaged, {})
	--sets.engaged.PDT.Haste_35.AM3 = set_combine(sets.engaged.AM3, {})
    
	--sets.engaged.Mid.PDT.Haste_35 = set_combine(sets.engaged.Mid, {})
    --sets.engaged.Mid.PDT.Haste_35.AM3 = set_combine(sets.engaged.Mid.AM3, {})
	
	--sets.engaged.Acc.PDT.Haste_35 = set_combine(sets.engaged.Acc, {})
	--sets.engaged.Acc.PDT.Haste_35.AM3 = set_combine(sets.engaged.Acc.AM3, {})

    -- 30% Haste 1626 / 798
	
    --sets.engaged.Haste_30 = set_combine(sets.engaged, {})
	    --sets.engaged.AM3.Haste_30 = set_combine(sets.engaged.AM3, {})
    --sets.engaged.Mid.Haste_30 = set_combine(sets.engaged.Mid, {})
		--sets.engaged.Mid.AM3.Haste_30 = set_combine(sets.engaged.Mid.AM3, {})
    --sets.engaged.Acc.Haste_30 = set_combine(sets.engaged.Acc, {})
		--sets.engaged.Acc.AM3.Haste_30 = set_combine(sets.engaged.Acc.AM3, {})
    --sets.engaged.Learning.Haste_30 = set_combine(sets.engaged, sets.Learning)
        --sets.engaged.Learning.AM3.Haste_30 = set_combine(sets.engaged, sets.Learning.AM3)
    --sets.engaged.PDT.Haste_30 = set_combine(sets.engaged.PDT, {})
        --sets.engaged.PDT.AM3.Haste_30 = set_combine(sets.engaged.PDT.AM3, {})
	--sets.engaged.Mid.PDT.Haste_30 = set_combine(sets.engaged.Mid.PDT, {})
        --sets.engaged.Mid.PDT.AM3.Haste_30 = set_combine(sets.engaged.Mid.PDT.AM3, {})
    --sets.engaged.Acc.PDT.Haste_30 = set_combine(sets.engaged.Acc.PDT, {})
    	--sets.engaged.Acc.PDT.AM3.Haste_30 = set_combine(sets.engaged.Acc.PDT.AM3, {})

    -- haste spell - 139 dex | 275 acc | 1150 total acc (with shigi R15)
    
	--sets.engaged.Haste_15 = set_combine(sets.engaged, {})
    	--sets.engaged.AM3.Haste_15 = set_combine(sets.engaged.AM3, {})
    --sets.engaged.Mid.Haste_15 = sets.engaged.Mid
    	--sets.engaged.Mid.AM3.Haste_15 = sets.engaged.Mid.AM3
    --sets.engaged.Acc.Haste_15 = sets.engaged.Acc
		--sets.engaged.Acc.AM3.Haste_15 = sets.engaged.Acc.AM3
    --sets.engaged.PDT.Haste_15 = set_combine(sets.engaged.PDT, {})
        --sets.engaged.PDT.AM3.Haste_15 = set_combine(sets.engaged.PDT.AM3, {})
    --sets.engaged.Mid.PDT.Haste_15 = set_combine(sets.engaged.Mid.PDT, {})
    	--sets.engaged.Mid.PDT.AM3.Haste_15 = set_combine(sets.engaged.Mid.PDT.AM3, {})
	--sets.engaged.Acc.PDT.Haste_15 = set_combine(sets.engaged.Acc.PDT, {})
	    --sets.engaged.Acc.PDT.AM3.Haste_15 = set_combine(sets.engaged.Acc.PDT.AM3, {})

    sets.self_healing = {
    hands={ name="Telchine Gloves", augments={'Potency of "Cure" effect received+7%','"Regen" potency+3',}},
    waist="Gishdubar Sash",
    left_ring="Kunaji Ring",
    right_ring="Asklepian Ring",
    }
	end
    
    ----------------------------------------------------------------------------------------------------------------------
    ------------------------------HASTE-----------------------------------------------------------------------------------
    ----------------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------------------------
-- Job-specific hooks for standard casting events.
-------------------------------------------------------------------------------------------------------------------



-- Set eventArgs.handled to true if we don't want any automatic gear equipping to be done.
-- Set eventArgs.useMidcastGear to true if we want midcast gear equipped on precast.
--function job_precast(spell, action, spellMap, eventArgs)
 --   if unbridled_spells:contains(spell.english) and not state.Buff['Unbridled Learning'] then
   --     eventArgs.cancel = true
     --   windower.send_command('@input /ja "Unbridled Learning" <me>; wait 1.5; input /ma "'..spell.name..'" '..spell.target.name)
    --end
    --if spell.name == 'Spectral Jig' and buffactive.sneak then
         --If sneak is active when using, cancel before completion
    --    send_command('cancel 71')
    --end
    --if string.find(spell.english, 'Utsusemi') then
     --   if buffactive['Copy Image (3)'] or buffactive['Copy Image (4)'] then
      --      cancel_spell()
       --     eventArgs.cancel = true
        --    return
        --end
    --end

--end

function job_post_precast(spell, action, spellMap, eventArgs)
    if spellMap == 'Utsusemi' then
        if buffactive['Copy Image (3)'] or buffactive['Copy Image (4+)'] then
            cancel_spell()
            add_to_chat(123, '**!! '..spell.english..' Canceled: [3+ IMAGES] !!**')
            eventArgs.handled = true
            return
        elseif buffactive['Copy Image'] or buffactive['Copy Image (2)'] then
            send_command('cancel 66; cancel 444; cancel Copy Image; cancel Copy Image (2)')
        end
    end
 end

-- Run after the default midcast() is done.
-- eventArgs is the same one used in job_midcast, in case information needs to be persisted.
function job_post_midcast(spell, action, spellMap, eventArgs)
    -- Add enhancement gear for Chain Affinity, etc.
    if spell.skill == 'Blue Magic' then
        for buff,active in pairs(state.Buff) do
            if active and sets.buff[buff] then
                equip(sets.buff[buff])
            end
        end
        if spellMap == 'Healing' and spell.target.type == 'SELF' and sets.self_healing then
            equip(sets.self_healing)
        end
    end

    -- If in learning mode, keep on gear intended to help with that, regardless of action.
    if state.OffenseMode.value == 'Learning' then
        equip(sets.Learning)
    end
end

function job_aftercast(spell, action, spellMap, eventArgs)
    if spell.name == 'Pollen' and state.SkillMode.value == 'On' then
        windower.send_command('wait 3; input /ma "'..spell.name..'" '..spell.target.name)
    end
end
-------------------------------------------------------------------------------------------------------------------
-- Job-specific hooks for non-casting events.
-------------------------------------------------------------------------------------------------------------------

-- Called when a player gains or loses a buff.
-- buff == buff gained or lost
-- gain == true if the buff was gained, false if it was lost.
function job_buff_change(buff, gain)
    if state.Buff[buff] ~= nil then
        state.Buff[buff] = gain
    end
    -- If we gain or lose any haste buffs, adjust which gear set we target.
    if S{'haste', 'march', 'mighty guard', 'embrava', 'haste samba', 'geo-haste', 'indi-haste'}:contains(buff:lower()) then
        determine_haste_group()
        if not midaction() then
            handle_equipping_gear(player.status)
        end
    end
    if buff:startswith('Aftermath') then
        if player.equipment.main == 'Tizona' then
            classes.CustomMeleeGroups:clear()

            if (buff == "Aftermath: Lv.3" and gain) or buffactive['Aftermath: Lv.3'] then
                classes.CustomMeleeGroups:append('AM3')
                add_to_chat(8, '-------------AM3 UP-------------')
            end

            if not midaction() then
                handle_equipping_gear(player.status)
            end
        end
    end

end

-------------------------------------------------------------------------------------------------------------------
-- User code that supplements standard library decisions.
-------------------------------------------------------------------------------------------------------------------

-- Custom spell mapping.
-- Return custom spellMap value that can override the default spell mapping.
-- Don't return anything to allow default spell mapping to be used.
function job_get_spell_map(spell, default_spell_map)
    if spell.skill == 'Blue Magic' then
        for category,spell_list in pairs(blue_magic_maps) do
            if spell_list:contains(spell.english) then
                return category
            end
        end
    end
end

-- Modify the default idle set after it was constructed.
function customize_idle_set(idleSet)
    if player.mpp < 51 then
        set_combine(idleSet, sets.latent_refresh)
    end
    return idleSet
end

-- Called by the 'update' self-command, for common needs.
-- Set eventArgs.handled to true if we don't want automatic equipping of gear.
function job_update(cmdParams, eventArgs)
    update_combat_form()
    determine_haste_group()
    th_update(cmdParams, eventArgs)
end

function check_buff(buff_name, eventArgs)
    if state.Buff[buff_name] then
        equip(sets.buff[buff_name] or {})
        if state.TreasureMode.value == 'SATA' or state.TreasureMode.value == 'Fulltime' then
            equip(sets.TreasureHunter)
        end
        eventArgs.handled = true
    end
end
-- Check for various actions that we've specified in user code as being used with TH gear.
-- This will only ever be called if TreasureMode is not 'None'.
-- Category and Param are as specified in the action event packet.
function th_action_check(category, param)
    if category == 2 or -- any ranged attack
      --  category == 4 or -- any magic action
        (category == 3 and param == 30) or -- Aeolian Edge
        (category == 6 and info.default_ja_ids:contains(param)) or --Provoke --Animated Flourish
        (category == 14 and info.default_u_ja_ids:contains(param)) -- Quick/Box/Stutter Step, Desperate/Violent Flourish
        then 
            return true
    end
end



function determine_haste_group()

    classes.CustomMeleeGroups:clear()
    -- mythic AM	
    if player.equipment.main == 'Tizona' then
        if buffactive['Aftermath: Lv.3'] then
            classes.CustomMeleeGroups:append('AM3')
        end
    end
    -- assuming +4 for marches (ghorn has +5)
    -- Haste (white magic) 15%
    -- Haste Samba (Sub) 5%
    -- Haste (Merited DNC) 10% (never account for this)
    -- Victory March +0/+3/+4/+5    9.4/14%/15.6%/17.1% +0
    -- Advancing March +0/+3/+4/+5  6.3/10.9%/12.5%/14%  +0
    -- Embrava 30% with 500 enhancing skill
    -- Mighty Guard - 15%
    -- buffactive[580] = geo haste
    -- buffactive[33] = regular haste
    -- buffactive[604] = mighty guard
    -- state.HasteMode = toggle for when you know Haste II is being cast on you
    -- Hi = Haste II is being cast. This is clunky to use when both haste II and haste I are being cast
    if ( ( (buffactive[33] or buffactive[580] or buffactive.embrava) and (buffactive.march or buffactive[604]) ) or
            ( buffactive[33] and (buffactive[580] or buffactive.embrava) ) or
            ( buffactive.march == 2 and buffactive[604] ) ) then
        add_to_chat(8, '-------------Max-Haste Mode Enabled--------------')
        classes.CustomMeleeGroups:append('MaxHaste')
    elseif ( (buffactive[33] or buffactive.march == 2 or buffactive[580]) and buffactive['haste samba'] ) then
        add_to_chat(8, '-------------Haste 35%-------------')
        classes.CustomMeleeGroups:append('Haste_35')
    elseif ( ( buffactive[580] or buffactive[33] or buffactive.march == 2 ) or
                ( buffactive.march == 1 and buffactive[604] ) ) then
        add_to_chat(8, '-------------Haste 30%-------------')
        classes.CustomMeleeGroups:append('Haste_30')
    elseif ( buffactive.march == 1 or buffactive[604] ) then
        add_to_chat(8, '-------------Haste 15%-------------')
        classes.CustomMeleeGroups:append('Haste_15')
    end

end


-------------------------------------------------------------------------------------------------------------------
-- Utility functions specific to this job.
-------------------------------------------------------------------------------------------------------------------

function update_combat_form()
    -- Check for H2H or single-wielding
    --if player.equipment.sub == "Genbu's Shield" or player.equipment.sub == 'empty' then
    --    state.CombatForm:reset()
    --end
end


-- Select default macro book on initial load or subjob change.
function select_default_macro_book()
    -- Default macro set/book
    if player.sub_job == 'DNC' then
        set_macro_page(1, 1)
    else
        set_macro_page(1, 1)
    end
end

 


function set_lockstyle()
if player.sub_job == 'DRK' then
        lockstyleset = 1
    elseif player.sub_job == 'THF' then
        lockstyleset = 7
	elseif player.sub_job == 'WAR' then
        lockstyleset = 7
	elseif player.sub_job == 'WHM' then
        lockstyleset = 4
	elseif player.sub_job == 'SCH' then
        lockstyleset = 4
	elseif player.sub_job == 'RUN' then
        lockstyleset = 14
	elseif player.sub_job == 'DRG' then
        lockstyleset = 16
	else
	    lockstyleset = 3
    end
    send_command('wait 5; input /lockstyleset ' .. lockstyleset)
     end
	 send_command('input //config FrameRateDivisor 1')
	
   end


